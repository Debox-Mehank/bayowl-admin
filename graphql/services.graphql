fragment services on UserServices {
  _id
  mainCategory
  subCategory
  serviceName
  subService
  subService2
  estimatedTime
  price
  mixVocalTuningBasic
  mixVocalTuningAdvanced
  mixProcessingReverbs
  mixProcessingDelays
  mixProcessingOtherFx
  addOn {
    type
    value
    qty
    main
  }
  deliveryDays
  updatedAt
  createdAt
  projectName
  paid
  assignedTo {
    _id
    name
  }
  assignedBy {
    _id
    name
  }
  statusType
  setOfRevisions
  inputTrackLimit
  referenceFiles
  revisionFiles {
    file
    description
    revision
    revisionFor
    revisionTime
  }
  status {
    name
    state
  }
  deliveryFileFormat
  uploadFileFormat
  uploadedFiles
  reupload
  notes
  submissionDate
  estDeliveryDate
  assignedTime
  deliveredFiles
  revisionNotesByMaster
  revisionTimeByMaster
  numberOfRevisionsByMaster
  masterProjectApprovalTime
  completionDate
  addOnExportsBusStems
  addOnExportsFile
  addOnExportsMultitrack
  addOnExtraRevision
  paidAt
  wrokingFile
}

query GetAllService {
  getAllService {
    _id
    mainCategory
    subCategory
    serviceName
    subService
    subService2
    description
    estimatedTime
    price
    inputTrackLimit
    uploadFileFormat
    deliveryFileFormat
    deliveryDays
    maxFileDuration
    numberOfReferenceFileUploads
    setOfRevisions
    revisionsDelivery
    mixVocalTuningBasic
    mixVocalTuningAdvanced
    mixProcessingReverbs
    mixProcessingDelays
    mixProcessingOtherFx
    addOn {
      type
      value
      qty
      main
    }
    createdAt
    updatedAt
  }
}

query GetAllUser {
  getAllUser {
    _id
    name
    email
    number
    free
    services {
      _id
      statusType
      status {
        name
        state
      }
      # mainCategory
      # subCategory
      # serviceName
      # subService
      # subService2
      # uploadedFiles
      # referenceFiles
      # addOn {
      #   type
      #   value
      #   qty
      # }
      # deliveryFileFormat
      # # createdAt
      # # updatedAt
      # uploadFileFormat
      # paid
      # price
      # revisionFiles {
      #   file
      #   description
      #   revision
      # }
    }
    lastLoggedIn
    lastLoggedOut
    accountVerified
    createdAt
    updatedAt
  }
}

query GetAllPayment {
  getAllPayment {
    _id
    email
    orderId
    paymentId
    paymentLinkId
    signature
    userServiceId
    amount
    status
    createdAt
    updatedAt
  }
}

query AllAdmins {
  allAdmins {
    _id
    name
    email
    type
    createdBy {
      name
    }
    createdAt
    updatedAt
  }
}

query GetAllServiceForEmployee {
  getAllServiceForEmployee {
    ...services
  }
}

query GetAllServiceForMaster {
  getAllServiceForMaster {
    ...services
  }
}

query AllEmployee {
  allEmployee {
    _id
    name
  }
}

query AllDashboardContent {
  allDashboardContent {
    _id
    lastUpdatedBy {
      name
    }
    createdBy {
      name
    }
    image
    active
    createdAt
    updatedAt
  }
}

query AddDashboardContent($input: DashboardContentInput!) {
  addDashboardContent(input: $input) {
    _id
    lastUpdatedBy {
      name
    }
    createdBy {
      name
    }
    image
    active
    createdAt
    updatedAt
  }
}

mutation AssignService($adminId: String!, $serviceId: String!) {
  assignService(adminId: $adminId, serviceId: $serviceId)
}

query Dashboard {
  dashboardMet {
    label
    data
  }
}

query GetS3SignedURL($fileName: String!) {
  getS3SignedURL(fileName: $fileName)
}

query InitFileUpload($fileName: String!) {
  initFileUpload(fileName: $fileName) {
    fileId
    fileKey
  }
}

query GetMultipartPreSignedUrls(
  $parts: Float!
  $fileKey: String!
  $fileId: String!
) {
  getMultipartPreSignedUrls(parts: $parts, fileKey: $fileKey, fileId: $fileId) {
    signedUrl
    PartNumber
  }
}

query ApproveProject($serviceId: String!) {
  approveProject(serviceId: $serviceId)
}

query AddDeliveryFiles($url: String!, $serviceId: String!) {
  addDeliverFiles(url: $url, serviceId: $serviceId)
}

query FinalizeMultipartUpload($input: FinalMultipartUploadInput!) {
  finalizeMultipartUpload(input: $input)
}

query ConfirmUpload($deliveryDays: Float!, $serviceId: String!) {
  confirmUpload(deliveryDays: $deliveryDays, serviceId: $serviceId)
}

query RequestReupload($reuploadNote: String!, $serviceId: String!) {
  requestReupload(reuploadNote: $reuploadNote, serviceId: $serviceId)
}

query Logout {
  adminLogout
}

query AdminLogin($input: AdminLoginInput!) {
  adminLogin(input: $input)
}

query MeAdmin {
  meAdmin {
    _id
    name
    type
  }
}

mutation AddAdmin($input: AdminRegisterInput!) {
  addUser(input: $input)
}

mutation UploadRevisionFiles(
  $revisionNumber: Float!
  $fileUrl: String!
  $serviceId: String!
) {
  uploadRevisionFiles(
    revisionNumber: $revisionNumber
    fileUrl: $fileUrl
    serviceId: $serviceId
  )
}

mutation AddService($input: [ServicesInput!]!) {
  addService(input: $input)
}

query GetContentUploadUrl($fileName: String!) {
  getContentUploadUrl(fileName: $fileName)
}

query ResetPassword($password: String!, $resetPasswordId: String!) {
  resetPassword(password: $password, id: $resetPasswordId)
}

query AddRevisionNotesByMaster($note: String!, $serviceId: String!) {
  addRevisionNotesByMaster(note: $note, serviceId: $serviceId)
}

query GetAllPaymentConfig {
  getAllPaymentConfig {
    _id
    type
    value
    active
    lastUpdatedBy {
      name
    }
    updatedAt
  }
}

query UpdatePaymentConfig($gst: Boolean!) {
  updatePaymentConfig(gst: $gst)
}

query UpdateFreeUser($free: Boolean!, $updateFreeUserId: String!) {
  updateFreeUser(free: $free, id: $updateFreeUserId)
}
